package main

import (
	"fmt"
	"io/ioutil"
	"regexp"
	"strings"
)

// "s "
// "tw"
// "se"
func addquotes(s string) string {
	firstQuoteIdx := -1
	lastQuoteIdx := -1
	for i, r := range s {
		if (r == 0x2018) || (r == 0x2019) || (r == 0x201c) || (r == 0x201d) {
			if (r == 0x2019) &&
				(((i > 0) && (s[i-1] == 's')) ||
					(((i + 3) < len(s)) && (s[i+3] != ' '))) {
				continue
			}
			if (r == 0x2018) &&
				((i + 4) < len(s)) &&
				(((s[i+3] == 'e') && (s[i+4] == 'm')) ||
					((s[i+3] == 'p') && (s[i+4] == 'o')) ||
					((s[i+3] == 'P') && (s[i+4] == 'o')) ||
					((s[i+3] == 't') && (s[i+4] == 'w')) ||
					((s[i+3] == 's') && (s[i+4] == ' ')) ||
					((s[i+3] == 's') && (s[i+4] == 'e'))) {
				continue
			}
			if firstQuoteIdx < 0 {
				firstQuoteIdx = i
			}
			lastQuoteIdx = i
		}
	}
	firstQuote := rune(-1)
	lastQuote := rune(-1)
	if firstQuoteIdx >= 0 {
		firstQuote = []rune(s[firstQuoteIdx:])[0]
	}
	if lastQuoteIdx >= 0 {
		lastQuote = []rune(s[lastQuoteIdx:])[0]
	}
	beginning := rune(-1)
	end := rune(-1)
	if firstQuote == 0x2019 {
		beginning = 0x2018
	} else if firstQuote == 0x201d {
		beginning = 0x201c
	}
	if lastQuote == 0x2018 {
		end = 0x2019
	} else if lastQuote == 0x201c {
		end = 0x201d
	}
	if beginning >= 0 {
		s = string(beginning) + s
	}
	if end >= 0 {
		s = s + string(end)
	}
	return s
}

func main() {
	re := regexp.MustCompile(
		`(.*?[.?!])[\x{2019}\x{201d}]? *[\x{2018}\x{201c}]?(\p{Lu})`)
	databytes, _ := ioutil.ReadFile("data/warandpeace.txt")
	datastr := strings.Join(
		strings.Fields(strings.Replace(string(databytes), "*", "", -1)),
		" ") + " A"

	submatches := re.FindAllStringSubmatch(datastr, -1)
	pieces := []string{}
	for i := range submatches {
		if i == 0 {
			pieces = append(pieces, submatches[i][1])
		} else {
			pieces = append(pieces, submatches[i-1][2]+submatches[i][1])
		}
	}
	pieces[0] = pieces[0][3:]
	// Mr.
	// Dr.
	// St.
	// Messrs.
	// M.
	pieces2 := []string{}
	for i := 0; i < len(pieces); i++ {
		piece := pieces[i]
		for strings.HasSuffix(piece, "Mr.") ||
			strings.HasSuffix(piece, "Dr.") ||
			strings.HasSuffix(piece, "St.") ||
			strings.HasSuffix(piece, "M.") ||
			strings.HasSuffix(piece, "Messrs.") {
			i++
			piece += " " + pieces[i]
		}
		pieces2 = append(pieces2, piece)
	}
	for i := range pieces2 {
		pieces2[i] = addquotes(pieces2[i])
	}
	out := fmt.Sprintf("%#v", pieces2)
	out = strings.Replace(out, "{\"", "{\n\t\"", 1)
	out = strings.Replace(out, "\", \"", "\",\n\t\"", -1)
	out = strings.Replace(out, "\"}", "\",\n}\n", 1)
	out = `// Code generated by data/genpieces.go - DO NOT EDIT.
package wordsandpieces // import "github.com/quitehimself/wordsandpieces"

var Pieces = ` + out
	ioutil.WriteFile("pieces.go", []byte(out), 0600)
}
